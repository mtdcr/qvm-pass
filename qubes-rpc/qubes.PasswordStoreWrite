#!/usr/bin/env python3
#
# Copyright 2022 Andreas Oberritter
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

import base64
import json
import os
import subprocess  # nosec
import sys

commands = {
    "qubes.PasswordStoreRead": ("ls", "find", "show", "grep", "help", "version"),
    "qubes.PasswordStoreWrite": (
        "init",
        "insert",
        "edit",
        "generate",
        "rm",
        "mv",
        "cp",
    ),
    # filtered: git
}

env_whitelist = {
    "HOME",
    "LANG",
}
env = {k: v for k, v in os.environ.items() if k in env_whitelist}
env["EDITOR"] = "false"

cmd = os.path.basename(sys.argv[0])
subcommands = commands.get(cmd)
if not subcommands:
    sys.exit("Called with an invalid script name")

try:
    data = json.load(sys.stdin)
except json.decoder.JSONDecodeError as exc:
    sys.exit(exc)

argv = data.get("a")
if not argv:
    sys.exit("No arguments supplied")
del data["a"]
if not isinstance(argv, list):
    sys.exit("Parameter a must be a list")
if not all([isinstance(arg, str) for arg in argv]):
    sys.exit("List members in a must be strings")
if argv[0] != os.environ["QREXEC_SERVICE_ARGUMENT"]:
    sys.exit("First member of a must match value in QREXEC_SERVICE_AGENT")
if argv[0] not in subcommands:
    sys.exit("Disallowed, invalid or unimplemented subcommand")

stdin = None
if cmd == "qubes.PasswordStoreWrite":
    stdin = data.get("i")
    if argv[0] in ("insert", "edit"):
        if stdin is None:
            sys.exit("No input supplied")
        if not isinstance(stdin, str):
            sys.exit("Input is not a string")
        stdin = base64.b64decode(stdin)
        if argv[0] == "edit":
            env["EDITOR"] = "cp /dev/stdin"
        del data["i"]
    elif stdin is not None:
        sys.exit("Unexpected input")

if data:
    sys.exit("Excess input supplied")

env["PASSWORD_STORE_DIR"] = os.path.join(os.environ["HOME"], "password-store", os.environ["QREXEC_REMOTE_DOMAIN"])

p = subprocess.run(["pass"] + argv, input=stdin, capture_output=True, env=env)  # nosec
result = {
    "a": p.args,
    "r": p.returncode,
    "o": base64.b64encode(p.stdout).decode("ascii"),
    "e": base64.b64encode(p.stderr).decode("ascii"),
}
json.dump(result, sys.stdout)
